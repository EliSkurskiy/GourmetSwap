using GSwap.Data.Providers;
using GSwap.Models.Domain;
using GSwap.Models.Requests.Email;
using GSwap.Models.Requests.Users;
using GSwap.Models.Responses;
using GSwap.Services;
using GSwap.Services.Cryptography;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;

namespace GSwap.Web.Controllers.Api
{
    [RoutePrefix("api/users")]
    public class EmailRecoveryRequestApiController : ApiController
    {
        private IUserService _userService;
        private IEmailService _emailService;
        private ITokenService _tokenService;

        private const int HASH_ITERATION_COUNT = 1;
        private const int RAND_LENGTH = 15;


        public EmailRecoveryRequestApiController(IEmailService emailService, ITokenService tokenService, IUserService userService, ICryptographyService cryptographyService)
        {
            _userService = userService;
            _emailService = emailService;
            _tokenService = tokenService;

        }

        [Route("passwords/requests"), HttpPost][AllowAnonymous]
        public async Task<HttpResponseMessage> Recover(RecoveryRequest request)
        {
            bool hasExistingToken;
            bool exists;
            int userId;
            int tokenTypeId = 1;
            SuccessResponse success = null;
            if (!ModelState.IsValid)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            };

            exists = _userService.UserExists(request.Email);

            if (exists == false)
            {
                ErrorResponse errorResp = new ErrorResponse("Email could not be found.");
                return Request.CreateResponse(HttpStatusCode.NotFound, errorResp);
            }
            else
            {
                userId = _emailService.GetIdByEmail(request.Email);
                hasExistingToken = _tokenService.HasExistingToken(userId, tokenTypeId);


                if (!hasExistingToken)
                {
                    Guid guidToken = _tokenService.GenerateToken(userId, tokenTypeId);
                    bool result = await _emailService.SendRecovery(request, guidToken);
                }
                else
                {
                    Guid returnedGuidToken = _tokenService.GetGuidById(userId, tokenTypeId);
                    bool result = await _emailService.SendRecovery(request, returnedGuidToken);
                }
                success = new SuccessResponse();
                return Request.CreateResponse(HttpStatusCode.OK, success);
            }


            //if you do not find me in the system return error response that has a message that you cant find me in the system

        }
        //{token:guid}
        [Route("passwords/recover/{token:guid}"), HttpPost][AllowAnonymous]
        public async Task<HttpResponseMessage> ResetPassword(ResetRequest request, Guid token)
        {
            bool hasExistingToken;
            int tokenTypeId = 1;
            int userId = 0;
            string email = null;
            SuccessResponse success = null;
            if (!ModelState.IsValid)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            }
            userId = _tokenService.GetIdByGuid(token);
            hasExistingToken = _tokenService.HasExistingToken(userId, tokenTypeId);

            if (!hasExistingToken)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Token expired password has already been reset!");
            }
            else
            {
                email = _userService.GetEmailById(userId);
                _userService.SetNewPassword(request, userId);
                _tokenService.TokenDelete(userId, tokenTypeId);
                await _emailService.ResetConfirmation(email);

            }
            success = new SuccessResponse();
            return Request.CreateResponse(HttpStatusCode.OK, success);
        }

    }
}
